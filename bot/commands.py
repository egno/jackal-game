import db
import logging
import declaration
import re
import utils
import user

def start(bot, update):
        u = user.User(update.message.from_user)
        update.message.reply_text(
                f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {u.user['first_name']}!
—ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –î–ê–ë–ß.
–í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –±–æ—Ç—É –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–π—Ç–µ –î–ê–ë–ß ( http://www.aba.government.bg/?legal=9 ) –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–Ω–∏ –ø—Ä–∏–µ–º–∞, –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ.   

üïπ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ: /declaration

–ë–æ—Ç —Ç–∞–∫–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
üïπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–ª–µ–Ω–∏—è: /status
üïπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /view 
üïπ –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–ª–µ–Ω–∏–µ: /clear
üïπ –ü–æ–∫–∏–Ω—É—Ç—å –±–æ—Ç–∞, —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: /stop
üïπ –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: /start

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ–ª–µ–π –∑–∞—è–≤–ª–µ–Ω–∏—è, —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –î–ê–ë–ß:
http://www.aba.government.bg/?legal=9

–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
–ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ: /clear
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.
'''
        )


def status(bot, update):
        u = user.User(update.message.from_user)
        if u.status == '' or u.status == 'stop':
                logging.info(u.status, u.step)
                if u.step == '':
                        update.message.reply_text(
                                f'''‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è.

üïπ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ: /declaration
'''
                        )
                else:
                        update.message.reply_text(
                                f'''‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è.
                                
üïπ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ: /declaration'''
                        )
                return 
        
        if status == 'ready':
                update.message.reply_text(
                        f'''‚èØ –û–∂–∏–¥–∞–π—Ç–µ.
–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞—Ç—ã, –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.

üïπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /view '''
                )
                return 

        if status == 'success':
                update.message.reply_text(
                        f'''‚úÖ –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:

‚åöÔ∏è {(u.info or {}).get('sended')}
‚úâÔ∏è {' '.join((u.info or {}).get('messages'))}
'''
                )
                return 

        if status == 'fail':
                update.message.reply_text(
                        f'''‚ùå –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:
‚åöÔ∏è{(u.info or {}).get('sended')}
‚úâÔ∏è{' '.join((u.info or {}).get('messages'))}

üïπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /view '''
                )
                return 


def stop(bot, update):
        _ = user.User(update.message.from_user)
        db.saveDeclaration(update.message.from_user, {}, None, 'stop')
        update.message.reply_text(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')


def clear(bot, update):
        _ = user.User(update.message.from_user)
        db.saveDeclaration(update.message.from_user, {}, None, '')
        update.message.reply_text(f'''–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.
–ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É: /declaration''')


def view(bot, update):
        u = user.User(update.message.from_user)
        txt = []
        dt = (u.request or {}).get('dt',{})
        txt.append(f"–î–∞—Ç—ã: {dt.get('from','')} - {dt.get('to','')}")
        doc = (u.request or {}).get('doc',{})
        for key in doc:
                field = declaration.getField(key)
                txt.append(f'''{field_display(field)}:
{doc[key]}
üïπ –ò–∑–º–µ–Ω–∏—Ç—å: /edit_{key}
''')
        txt.append('''
üïπ –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–ª–µ–Ω–∏–µ: /clear''')
        result = '\n'.join(txt)
        update.message.reply_text(result)


def edit(bot, update):
        u = user.User(update.message.from_user)
        u.step = update.message.text[6:]
        request, _ = declaration.checkDeclaration(u)
        _, item = declaration.getRequestItem(u.step, request)
        if item is None:
                return
        u = db.saveDeclaration(update.message.from_user, request, u.step)
        step_request(bot, update, user, request, u['step'])


def field_display(field):
        if field is None:
                return ''
        return field.get("text") or field.get("key")


def step_request(bot, update, user, request, step):
        if step == '':
                user = db.saveDeclaration(update.message.from_user, request, step, 'ready')
                status(bot, update)
        else:
                user = db.saveDeclaration(update.message.from_user, request, step)
                field = declaration.getField(step)
                field_name = field_display(field)
                if field.get('required', False):
                        field_name = field_name + ' *'
                values = field.get('values')
                txt = []
                
                if values is None:
                        txt.append(f'–í–≤–µ–¥–∏—Ç–µ "{field_name}"')
                else:
                        txt.append(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è "{field_name}":')
                        if field.get('multiple', False):
                                txt.append(f'–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
                        for val in values:
                                txt.append(f'{val.get("key")} - {val.get("text")}')
                text = '\n'.join(txt)
                update.message.reply_text(text)


       
def next_step(bot, update, user):
        request, step = declaration.checkDeclaration(user)
        step_request(bot, update, user, request, step)


def check_declaration(bot, update):
        user = db.saveUser(update.message.from_user)
        update.message.reply_text('''–†–ê–ó–†–ï–®–ï–ù–ò–¢–ï –ó–ù–ê–¶–ò –ü–†–ò –ü–û–ü–™–õ–í–ê–ù–ï –°–ê –ë–£–ö–í–ò –ù–ê –ö–ò–†–ò–õ–ò–¶–ê –ò –¶–ò–§–†–ò. –ú–û–õ–Ø –ù–ï –ò–ó–ü–û–õ–ó–í–ê–ô–¢–ï ""
–í—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å—ä—Å * —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏.
–ï—Å–ª–∏ –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–ª–µ, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞–∫ "-" (–º–∏–Ω—É—Å)
''')
        next_step(bot, update, user)
        


def text_input(bot, update):
        user = db.saveUser(update.message.from_user)
        request, step = declaration.checkDeclaration(user)
        text = update.message.text.strip()
        if text == '-':
                text = ""
        if step is not None:
                if step in [key for key in declaration.docFields]:
                        field = declaration.docFields.get(step) or {}
                        if text == '' and field.get('required', False):
                                update.message.reply_text(f'''–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.''')
                        else:
                                if field.get('multiple', False):
                                        request['doc'][step] = re.split(r'\W+', text)
                                else:
                                        request['doc'][step] = text
                                update.message.reply_text(f'''_–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ "{step}": {request['doc'][step]}_''',
                                parse_mode='Markdown')
                else:
                        dt = request['dt']

                        text, result = utils.checkDate(text)
                        if result is not None:
                                update.message.reply_text(result)
                                next_step(bot, update, user)
                                return

                        if step.get('key') == 'date_from':
                                dt['from'] = text
                        if step.get('key') == 'date_to':
                                dt['to'] = text
                        request['dt'] = dt
                _, step = declaration.checkDeclaration(user)
                user = db.saveDeclaration(update.message.from_user, request, step)
                next_step(bot, update, user)



